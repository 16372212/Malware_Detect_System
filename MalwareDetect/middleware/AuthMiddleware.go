package middleware

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"fmt"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"strings"
)

func AuthMiddleware() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		// get authorization header
		tokenString := ctx.GetHeader("Authorization")

		// validate token format, Bear+space is the prefix
		if tokenString == "" || !strings.HasPrefix(tokenString, "Bearer ") {
			log.Println(fmt.Sprintf("[AuthMiddleware] token is empty"))
			ctx.JSON(http.StatusUnauthorized, gin.H{"code": 401, "msg": "Unauthorized"})
			ctx.Abort()
			return
		}

		// "Bearer " take 7 bit here, so valuable token start from 7
		tokenString = tokenString[7:]

		token, claims, err := common.ParseToken(tokenString)
		if err != nil || !token.Valid {
			log.Println(fmt.Sprintf("[AuthMiddleware] parse token wrong"))
			ctx.JSON(http.StatusUnauthorized, gin.H{"code": 401, "msg": "Unauthorized"})
			ctx.Abort()
			return
		}

		// token pass auth, get userid from claims, and get user
		userId := claims.UserId
		DB := common.GetDB()
		var user model.User
		DB.First(&user, userId)

		// if user not exist
		if user.ID == 0 {
			log.Println(fmt.Sprintf("[AuthMiddleware] user not exist"))
			ctx.JSON(http.StatusUnauthorized, gin.H{"code": 401, "msg": "Unauthorized"})
			ctx.Abort()
			return
		}

		// write user info into ctx
		ctx.Set("user", user)

		ctx.Next()
	}
}
