package main

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	"log"
	"math/rand"
	"net/http"
	"time"
)

type User struct {
	gorm.Model
	Name     string `gorm:"type:varchar(20);not null"`
	Password string `gorm:"size:255;not null"`
}

func main() {
	db := InitDB()
	defer db.Close()
	r := gin.Default()
	r.POST("/api/register", func(ctx *gin.Context) {
		// argument
		name := ctx.PostForm("name")
		password := ctx.PostForm("password")

		// if user's name is null, put random string
		if len(name) == 0 {
			name = RandomString(10)
		}

		// check
		if len(password) < 6 {
			ctx.JSON(http.StatusUnprocessableEntity, gin.H{"code": 422, "msg": "length of password should not less than 6"})
			return
		}

		// create user

		log.Println("name:", name, "password:", password)

		// check whether user exist
		if isUserNameExist(db, name) {
			ctx.JSON(http.StatusUnprocessableEntity, gin.H{"code": 422, "msg": "user already exist"})
			return
		}

		// create user
		newUser := User{
			Name:     name,
			Password: password,
		}
		db.Create(newUser)

		ctx.JSON(200, gin.H{
			"message": "register success",
		})
	})
	panic(r.Run())
}

func isUserNameExist(db *gorm.DB, username string) bool {
	var user User
	db.Where("username = ?", username).First(&user)
	if user.ID != 0 {
		return true
	}
	return false
}
func RandomString(n int) string {
	var letters = []byte("fdsalgfhjdkagfyueiewhbfxbhjafkghdeakfkafd")
	result := make([]byte, n)

	rand.Seed(time.Now().Unix())
	for i := range result {
		result[i] += letters[rand.Intn(len(letters))]
	}

	return string(letters)
}

func InitDB() *gorm.DB {
	driverName := "mysql"
	host := "localhost"
	port := "3306"
	database := "ginessential"
	username := "root"
	password := "root"
	charset := "utf8"
	args := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=%s&parseTime=true",
		username,
		password,
		host,
		port,
		database,
		charset)

	db, err := gorm.Open(driverName, args)
	if err != nil {
		panic("fail to connect database, err:" + err.Error())
	}
	return db
}
