package common

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
)

func FileUpload(filename string) (string, error) {
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)
	writer.WriteField("sandbox_type", "win7_sp1_enx86_office2013")
	writer.WriteField("apikey", "请替换apikey")
	writer.WriteField("run_time", "60")
	fw, _ := writer.CreateFormFile("file", filename)
	f, _ := os.Open(filename)
	_, err := io.Copy(fw, f)
	if err != nil {
		log.Println(fmt.Sprintf("[WBClient] error when append file, err:%s", err.Error()))
		return "", err
	}

	writer.Close()

	// Create client
	client := &http.Client{}

	// Create request
	req, err := http.NewRequest("POST", "https://api.threatbook.cn/v3/file/upload", body)

	// Headers
	req.Header.Add("Content-Type", writer.FormDataContentType())

	// Fetch Request
	resp, err := client.Do(req)
	if err != nil {
		log.Println(fmt.Sprintf("[WBClient] fetch request error, err:%s", err.Error()))
		return "", err
	}

	// Read Response Body
	respBody, _ := ioutil.ReadAll(resp.Body)
	return string(respBody), nil
}

func FileReport(apikey string, sha256 string) (string, error) {
	// Create client
	client := &http.Client{}

	// Create request
	req, err := http.NewRequest("GET", fmt.Sprintf("https://api.threatbook.cn/v3/file/report/multiengines?apikey=%s&sha256=%s", apikey, sha256), nil)

	parseFormErr := req.ParseForm()
	if parseFormErr != nil {
		log.Println(fmt.Sprintf("[WBClient] fileReport request error, err:%s", parseFormErr.Error()))
		return "", err
	}

	// Fetch Request
	resp, err := client.Do(req)

	if err != nil {
		log.Println(fmt.Sprintf("[WBClient] fileReport fetch request error, err:%s", err.Error()))
		return "", err
	}

	// Read Response Body
	respBody, _ := ioutil.ReadAll(resp.Body)
	//fmt.Println("response Status : ", resp.Status)
	//fmt.Println("response Headers : ", resp.Header)
	//fmt.Println("response Body : ", string(respBody))
	return string(respBody), nil
}
