package handler

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"MalwareDetect/util/errors"
	"MalwareDetect/util/response"
	"MalwareDetect/util/strs"
	"fmt"
	"golang.org/x/crypto/bcrypt"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

type UserParam struct {
	Username  string `json:"username,omitempty"`
	Password  string `json:"password,omitempty"`
	Telephone string `json:"telephone,omitempty"`
}

// Register .
// @router /api/auth/register [POST]
func Register(ctx *gin.Context) {
	DB := common.GetDB()
	param := &UserParam{
		Username:  ctx.PostForm("username"),
		Password:  ctx.PostForm("password"),
		Telephone: ctx.PostForm("telephone"),
	}
	log.Println(fmt.Sprintf("[UserHandler] get register param:%+v", param))

	if err := checkRegisterParams(param); err != nil {
		response.Response(ctx, http.StatusUnprocessableEntity, 422, nil, err.Error())
		return
	}
	log.Println(fmt.Sprintf("[UserHandler] after check, param:%+v", param))

	if isUserExistByPhone(DB, param.Telephone) {
		response.Response(ctx, http.StatusUnprocessableEntity, 422, nil, "user already exist")
		return
	}

	newUser, err := createUser(DB, param)
	if err != nil {
		response.Response(ctx, http.StatusUnprocessableEntity, 500, nil, err.Error())
	}

	token, err := common.ReleaseToken(newUser)
	if err != nil {
		response.Response(ctx, http.StatusUnprocessableEntity, 500, nil, "internal error")
		log.Printf("token generate error: %v", err)
		return
	}

	response.Success(ctx, gin.H{"token": token}, "注册成功")
}

func checkRegisterParams(param *UserParam) error {
	if len(param.Username) == 0 {
		param.Username = strs.RandomString(5)
	}
	if len(param.Password) < 6 {
		return errors.New("length of password should not less than 6")
	}
	if len(param.Telephone) != 11 {
		return errors.New("length of telephone should be 11")
	}
	return nil
}

func isUserExistByPhone(db *gorm.DB, telephone string) bool {
	var user model.User
	db.Where("telephone = ?", telephone).First(&user)
	if user.ID != 0 {
		return true
	}
	return false
}

func createUser(DB *gorm.DB, param *UserParam) (model.User, error) {
	newUser := model.User{}
	// 加密保存密码
	hasePassword, err := bcrypt.GenerateFromPassword([]byte(param.Password), bcrypt.DefaultCost)
	if err != nil {
		return newUser, errors.New("password hash failed")
	}

	newUser.Password = string(hasePassword)
	newUser.Name = param.Username
	newUser.Telephone = param.Telephone
	log.Println(fmt.Sprintf("[UserHandler] writing param:%+v to DB", newUser))

	DB.Create(&newUser)
	return newUser, nil
}
