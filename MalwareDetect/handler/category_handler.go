package handler

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"MalwareDetect/util/response"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	"strconv"
)

// ICategoryHandler 方便编译器自动增加相应方法
type ICategoryHandler interface {
	RestHandler
}

// CategoryHandler 相同的包下不能支持相同的名称，为了和user系列的create不重名，这里定义了一个结构体的名称
type CategoryHandler struct {
	DB *gorm.DB
}

func NewCategoryHandler() ICategoryHandler {
	db := common.GetDB()
	db.AutoMigrate(model.Category{})
	return CategoryHandler{DB: db}
}

func (c CategoryHandler) Create(ctx *gin.Context) {
	var req model.Category
	ctx.Bind(&req)

	if req.Name == "" {
		response.Fail(ctx, "数据验证错误，分类名称必须填", nil)
		return
	}

	c.DB.Create(&req)
	response.Success(ctx, gin.H{"category": req}, "")
}

func (c CategoryHandler) Update(ctx *gin.Context) {
	// get req from body
	var req model.Category
	ctx.Bind(&req)

	if req.Name == "" {
		response.Fail(ctx, "数据验证错误，分类名称必须填写", nil)
		return
	}

	// get param in query of url path
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	var updateCategory model.Category
	if c.DB.First(&updateCategory, categoryId).RecordNotFound() {
		response.Fail(ctx, "分类不存在", nil)
		return
	}

	// parma type: map / struct / name value
	c.DB.Model(&updateCategory).Update("name", req.Name)

	response.Success(ctx, gin.H{"category": updateCategory}, "修改成功")
}

func (c CategoryHandler) Show(ctx *gin.Context) {
	// get param in query of url path
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	var category model.Category
	if c.DB.First(&category, categoryId).RecordNotFound() {
		response.Fail(ctx, "category不存在", nil)
		return
	}

	response.Success(ctx, gin.H{"category": category}, "")
}

func (c CategoryHandler) Delete(ctx *gin.Context) {
	// get param in query of url path
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	if err := c.DB.Delete(model.Category{}, categoryId).Error; err != nil {
		response.Fail(ctx, "删除失败，请重试", nil)
		return
	}

	response.Success(ctx, nil, "删除成功")
}
