package handler

import (
	"MalwareDetect/dao"
	"MalwareDetect/model"
	"MalwareDetect/model/vo"
	"MalwareDetect/util/response"
	"fmt"
	"github.com/gin-gonic/gin"
	"log"
	"strconv"
)

// ICategoryHandler 方便编译器自动增加相应方法
type ICategoryHandler interface {
	RestHandler
}

// CategoryHandler 相同的包下不能支持相同的名称，为了和user系列的create不重名，这里定义了一个结构体的名称
type CategoryHandler struct {
	CategoryDaoInstance dao.CategoryDao
}

func NewCategoryHandler() ICategoryHandler {
	instance := dao.NewCategoryDao()
	instance.DB.AutoMigrate(model.Category{})
	return CategoryHandler{CategoryDaoInstance: instance}
}

func (c CategoryHandler) Create(ctx *gin.Context) {
	var req vo.CreateCategoryRequest
	if err := ctx.ShouldBind(&req); err != nil {
		response.Fail(ctx, "数据验证错误，分类名称必须填", nil)
		return
	}
	category, err := c.CategoryDaoInstance.Create(req.Name)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryHandler] create fail, err:%s", err.Error()))
		panic(err)
		return
	}
	response.Success(ctx, gin.H{"category": category}, "")
}

func (c CategoryHandler) Update(ctx *gin.Context) {
	var req vo.CreateCategoryRequest
	if err := ctx.ShouldBind(&req); err != nil {
		response.Fail(ctx, "数据验证错误，分类名称必须填", nil)
		return
	}

	// get param in query of url path
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	updateCategory, err := c.CategoryDaoInstance.SelectById(categoryId)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryHandler] update fail, not exist"))
		response.Fail(ctx, "分类不存在", nil)
		return
	}

	category, err := c.CategoryDaoInstance.Update(*updateCategory, req.Name)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryHandler] update fail, err:%s", err.Error()))
		panic(err)
		return
	}

	response.Success(ctx, gin.H{"category": category}, "修改成功")
}

func (c CategoryHandler) Show(ctx *gin.Context) {
	// 获取path中的参数,将字符串强转成int类型
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	category, err := c.CategoryDaoInstance.SelectById(categoryId)
	if err != nil {
		response.Fail(ctx, "分类不存在", nil)
		return
	}

	response.Success(ctx, gin.H{"category": category}, "")
}

func (c CategoryHandler) Delete(ctx *gin.Context) {
	// get param in query of url path
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))
	if err := c.CategoryDaoInstance.DeleteById(categoryId); err != nil {
		panic(err)
		return
	}
	response.Success(ctx, nil, "删除成功")
}
