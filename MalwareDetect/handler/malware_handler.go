package handler

import (
	"MalwareDetect/service"
	"MalwareDetect/util/response"
	"fmt"
	"github.com/gin-gonic/gin"
)

func MalwareCreate(ctx *gin.Context) {
	malware, err := service.CoreMalwareService.Create(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
		return
	}
	response.Success(ctx, "创建成功", gin.H{"malware": malware})
}

func MalwareUpdate(ctx *gin.Context) {
	malware, err := service.CoreMalwareService.Update(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
		return
	}
	response.Success(ctx, "更新成功", gin.H{"malware": malware})
}

func MalwareShow(ctx *gin.Context) {
	malware, err := service.CoreMalwareService.Show(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
		return
	}
	response.Success(ctx, "", gin.H{"malware": malware})
}

func MalwareDelete(ctx *gin.Context) {
	malware, err := service.CoreMalwareService.Delete(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
		return
	}
	response.Success(ctx, "删除成功", gin.H{"malware": malware})
}

func MalwareList(ctx *gin.Context) {
	ginRsp, err := service.CoreMalwareService.PageList(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
		return
	}
	response.Success(ctx, "", ginRsp)
}

func UploadMalware(ctx *gin.Context) {
	filename, err := service.CoreMalwareService.UploadFile(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
		return
	}
	response.Success(ctx, fmt.Sprintf("%s写入成功", filename), gin.H{"filename": filename})
}
