package handler

import (
	"MalwareDetect/model"
	"MalwareDetect/service"
	"MalwareDetect/util/response"
	"github.com/gin-gonic/gin"
)

var malwareController = service.NewMalwareService()

func MalwareCreate(ctx *gin.Context) {
	rsp, err := malwareController.Create(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
	}
	malware, ok := rsp.(model.Malware)
	if !ok {
		response.Fail(ctx, "internal error", nil)
	}
	response.Success(ctx, "创建成功", gin.H{"malware": malware})
}

func MalwareUpdate(ctx *gin.Context) {
	rsp, err := malwareController.Update(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
	}
	malware, ok := rsp.(model.Malware)
	if !ok {
		response.Fail(ctx, "internal error", nil)
	}
	response.Success(ctx, "更新成功", gin.H{"malware": malware})
}

func MalwareShow(ctx *gin.Context) {
	rsp, err := malwareController.Show(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
	}
	malware, ok := rsp.(model.Malware)
	if !ok {
		response.Fail(ctx, "internal error", nil)
	}
	response.Success(ctx, "成功", gin.H{"malware": malware})
}

func MalwareDelete(ctx *gin.Context) {
	rsp, err := malwareController.Delete(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
	}
	malware, ok := rsp.(model.Malware)
	if !ok {
		response.Fail(ctx, "internal error", nil)
	}
	response.Success(ctx, "删除成功", gin.H{"malware": malware})
}

func MalwareList(ctx *gin.Context) {
	rsp, err := malwareController.PageList(ctx)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
	}
	ginRsp, ok := rsp.(gin.H)
	if !ok {
		response.Fail(ctx, "internal error", nil)
	}
	response.Success(ctx, "删除成功", ginRsp)
}
