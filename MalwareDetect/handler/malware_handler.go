package handler

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"MalwareDetect/model/vo"
	"MalwareDetect/util/response"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	"log"
)

type IMalwareHandler interface {
	CURDHandler
}

type MalwareHandler struct {
	DB *gorm.DB
}

func NewMalwareHandler() IMalwareHandler {
	db := common.GetDB()
	db.AutoMigrate(model.Malware{})
	return MalwareHandler{DB: db}
}

func (m MalwareHandler) Create(ctx *gin.Context) {
	var req vo.CreateMalwareRequest
	if err := ctx.ShouldBind(&req); err != nil {
		log.Print(err.Error())
		response.Fail(ctx, "数据验证错误", nil)
		return
	}

	// find user
	user, _ := ctx.Get("user")

	// create malware
	post := model.Malware{
		Name:       req.Name,
		Path:       req.Path,
		UserId:     user.(model.User).ID,
		CategoryId: req.CategoryId,
		Content:    req.Content,
	}

	// insert
	if err := m.DB.Create(&post).Error; err != nil {
		panic(err)
		return
	}

	response.Success(ctx, nil, "创建成功")
}

func (m MalwareHandler) Update(ctx *gin.Context) {
	var req vo.CreateMalwareRequest
	// 数据验证
	if err := ctx.ShouldBind(&req); err != nil {
		log.Print(err.Error())
		response.Fail(ctx, "数据验证错误", nil)
		return
	}

	postId := ctx.Params.ByName("id")

	var post model.Malware
	if m.DB.Where("id = ?", postId).First(&post).RecordNotFound() {
		response.Fail(ctx, "malware不存在", nil)
		return
	}

	// 判断当前用户是否为malware的作者
	// 获取登录用户
	user, _ := ctx.Get("user")
	userId := user.(model.User).ID
	if userId != post.UserId {
		response.Fail(ctx, "该malware的上传者不属于您，无法修改", nil)
		log.Println(fmt.Sprintf("you are %d, this malware belongs to %d", userId, post.UserId))
		return
	}

	// 更新文章
	if err := m.DB.Model(&post).Update(req).Error; err != nil {
		response.Fail(ctx, "更新失败", nil)
		return
	}

	response.Success(ctx, gin.H{"post": post}, "更新成功")
}

func (m MalwareHandler) Show(ctx *gin.Context) {
	// 获取path中的id
	postId := ctx.Params.ByName("id")

	var post model.Malware
	if m.DB.Preload("Category").Where("id = ?", postId).First(&post).RecordNotFound() {
		response.Fail(ctx, "Malware不存在", nil)
		return
	}

	response.Success(ctx, gin.H{"post": post}, "成功")
}

func (m MalwareHandler) Delete(ctx *gin.Context) {
	// 获取path中的id
	postId := ctx.Params.ByName("id")

	var post model.Malware
	if m.DB.Where("id = ?", postId).First(&post).RecordNotFound() {
		response.Fail(ctx, "malware不存在", nil)
		return
	}

	// 判断当前用户是否为malware的作者
	// 获取登录用户
	user, _ := ctx.Get("user")
	userId := user.(model.User).ID
	if userId != post.UserId {
		response.Fail(ctx, "malware不属于您，请勿非法操作", nil)
		log.Println(fmt.Sprintf("you are %d, this malware belongs to %d", userId, post.UserId))
		return
	}

	m.DB.Delete(&post)

	response.Success(ctx, gin.H{"post": post}, "删除成功")
}
