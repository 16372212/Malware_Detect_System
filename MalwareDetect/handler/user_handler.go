package handler

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"MalwareDetect/util/errors"
	"MalwareDetect/util/response"
	"MalwareDetect/util/strs"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// Register .
// @router /api/auth/register [POST]
func Register(ctx *gin.Context) {
	DB := common.GetDB()

	//var requestUser = model.User{}
	//ctx.Bind(&requestUser)

	username := ctx.PostForm("username")
	telephone := ctx.PostForm("telephone")
	password := ctx.PostForm("password")
	log.Println("name:", username, "password:", password, "telephone:", telephone)
	if err := checkRegisterParams(username, password, telephone); err != nil {
		response.Response(ctx, http.StatusUnprocessableEntity, 422, nil, err.Error())
		return
	}
	if checkUserExistByPhone(DB, telephone) {
		response.Response(ctx, http.StatusUnprocessableEntity, 422, nil, "user already exist")
		return
	}
	createUser(DB, username, password, telephone)
	response.Success(ctx, gin.H{"token": ""}, "注册成功")
}

func checkRegisterParams(username string, password string, telephone string) error {
	if len(username) == 0 {
		username = strs.RandomString(5)
	}
	if len(password) < 6 {
		return errors.New("length of password should not less than 6")
	}
	if len(telephone) != 11 {
		return errors.New("length of telephone should be 11")
	}
	return nil
}

func checkUserExistByPhone(db *gorm.DB, telephone string) bool {
	var user model.User
	db.Where("telephone = ?", telephone).First(&user)
	if user.ID != 0 {
		return true
	}
	return false
}

func createUser(DB *gorm.DB, username string, password string, telephone string) {
	newUser := model.User{
		Name:      username,
		Password:  password,
		Telephone: telephone,
	}
	DB.Create(&newUser)
}
