package service

import (
	"MalwareDetect/consts"
	"MalwareDetect/dao"
	"MalwareDetect/model"
	"MalwareDetect/model/vo"
	"MalwareDetect/util/errors"
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
)

type MalwareService struct {
	MalwareDaoInstance dao.MalwareDao
}

var apiKey = "019ada51d4ea4479bcac1554976fe9f77b08c8d902b142b18fbcd489e035dfdc"
var env = "win7_sp1_enx86_office2013"

func NewMalwareService() *MalwareService {
	instance := dao.NewMalwareDao()
	instance.DB.AutoMigrate(model.Malware{})
	return &MalwareService{MalwareDaoInstance: instance}
}

func (m MalwareService) Create(ctx *gin.Context) (*model.Malware, error) {
	var req vo.CreateMalwareRequest
	if err := ctx.ShouldBind(&req); err != nil {
		log.Print(err.Error())
		return nil, errors.New("数据验证错误")
	}

	// find user
	user, _ := ctx.Get("user")

	malware, err := m.MalwareDaoInstance.Create(user.(model.User).ID, req)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryService] create fail, err:%s", err.Error()))
		panic(err)
	}
	return malware, nil
}

func (m MalwareService) Update(ctx *gin.Context) (*model.Malware, error) {
	var req vo.CreateMalwareRequest
	// 数据验证
	if err := ctx.ShouldBind(&req); err != nil {
		log.Print(err.Error())
		return nil, errors.New("数据验证错误")
	}

	postId := ctx.Params.ByName("id")

	var updateMalware model.Malware
	if m.MalwareDaoInstance.DB.Where("id = ?", postId).First(&updateMalware).RecordNotFound() {
		return nil, errors.New("malware不存在")
	}

	// 判断当前用户是否为malware的作者
	// 获取登录用户
	user, _ := ctx.Get("user")
	userId := user.(model.User).ID
	if userId != updateMalware.UserId {
		log.Println(fmt.Sprintf("you are %d, this malware belongs to %d", userId, updateMalware.UserId))
		return nil, errors.New("该malware的上传者不属于您，无法修改")
	}

	// 更新文章
	malware, err := m.MalwareDaoInstance.Update(updateMalware, req)
	if err != nil {
		log.Println(fmt.Sprintf("[MalwareHandler] update fail, err:%s", err.Error()))
		panic(err)
	}
	return malware, nil
}

func (c MalwareService) Show(ctx *gin.Context) (*model.Malware, error) {
	malwareId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	malware, err := c.MalwareDaoInstance.SelectById(malwareId)
	if err != nil {
		return nil, errors.New("malware不存在")
	}

	return malware, nil
}

func (c MalwareService) Delete(ctx *gin.Context) (*model.Malware, error) {
	// get id in path
	postId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	// get user
	malware, err := c.MalwareDaoInstance.SelectById(postId)
	if err != nil {
		return nil, errors.New("malware不存在")
	}

	user, _ := ctx.Get("user")
	userId := user.(model.User).ID
	if userId != malware.UserId {
		log.Println(fmt.Sprintf("you are %d, this malware belongs to %d", userId, malware.UserId))
		return nil, errors.New("malware不属于您，请勿非法操作")
	}

	if err = c.MalwareDaoInstance.DeleteById(postId); err != nil {
		return nil, errors.New("internal error")
	}
	return malware, nil
}

func (c MalwareService) PageList(ctx *gin.Context) (gin.H, error) {
	// 获取分页参数
	pageNum, _ := strconv.Atoi(ctx.DefaultQuery("pageNum", "1"))
	pageSize, _ := strconv.Atoi(ctx.DefaultQuery("pageSize", "20"))

	// 分页, 按照创建时间排序
	malwares, err := c.MalwareDaoInstance.Order("created_at desc", pageNum, pageSize)
	if err != nil {
		return nil, err
	}
	// 记录的总条数
	total := c.MalwareDaoInstance.Count()
	// 返回数据
	return gin.H{"data": malwares, "total": total}, nil
}

func (c MalwareService) UploadFile(ctx *gin.Context) (gin.H, error) {
	fileFullPath, _ := c.readAndWriteFile(ctx)
	log.Println(fmt.Println(fmt.Sprintf("[UploadFile] filepath is %s", fileFullPath)))
	sha256, _ := c.getSha256(fileFullPath)
	log.Println(fmt.Println(fmt.Sprintf("[UploadFile] sha256 is %s", sha256)))
	return gin.H{"sha256": sha256}, nil
}

func (c MalwareService) readAndWriteFile(ctx *gin.Context) (string, error) {
	file, header, err := ctx.Request.FormFile("file")
	if err != nil {
		return "", errors.NewWithCode(500, fmt.Sprintf("fetch request, err:%s", err))
	}

	defer file.Close()

	// TODO 缩短名称长度
	fileNameLen := len(header.Filename)
	if fileNameLen > 15 {
		fileNameLen = 15
	}
	fileName := header.Filename[:fileNameLen]
	// 创建本地文件并保存上传的文件
	savePath := "/Users/zhenziyang/Documents/Git Workspace/GoProjects/Malware_Detect_System/MalwareDetect/upload/" + fileName

	log.Println(fmt.Println(fmt.Sprintf("====save path==== is %s", savePath)))

	dst, err := os.Create(savePath)
	if err != nil {
		return "", errors.NewWithCode(500, fmt.Sprintf("fail to create file, err:%s", err))
	}
	defer dst.Close()

	// 复制文件数据到本地文件
	_, err = io.Copy(dst, file)
	if err != nil {
		return "", errors.NewWithCode(500, fmt.Sprintf("Failed to save file, err:%s", err))
	}

	return savePath, nil
}

func (c MalwareService) getSha256(filename string) (string, error) {
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)
	writer.WriteField("sandbox_type", env)
	writer.WriteField("apikey", apiKey)
	writer.WriteField("run_time", "60")

	fw, _ := writer.CreateFormFile("file", filename)
	f, _ := os.Open(filename)
	_, err := io.Copy(fw, f)
	if err != nil {
		fmt.Println("error when append file", err.Error())
		return "", errors.NewWithCode(500, fmt.Sprintf("写入文件出错!, err:%s, filename:%s", err, filename))
	}

	writer.Close()

	// Create client
	client := &http.Client{}

	// Create request
	req, err := http.NewRequest("POST", "https://api.threatbook.cn/v3/file/upload", body)

	// Headers
	req.Header.Add("Content-Type", writer.FormDataContentType())

	// Fetch Request
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Failure : ", err)
		return "", errors.NewWithCode(500, fmt.Sprintf("fetch request, err:%s", err))
	}
	respBody, _ := ioutil.ReadAll(resp.Body)
	fileRsp := consts.FileResponse{}
	if err := json.Unmarshal(respBody, &fileRsp); err != nil {
		return "", err
	}

	log.Println(fmt.Println(fileRsp))
	return fileRsp.Data.Sha256, nil
}

func (c MalwareService) GetReport(ctx *gin.Context) (gin.H, error) {
	sha256 := ctx.Request.FormValue("sha256")
	//sha256 := ctx.DefaultQuery("sha256", "8b3d98063c711ec9307bb3dec2dffa15a2560f19d14afe0e1c392676f8700ad5")
	return c.fileReport(sha256)
}

func (c MalwareService) fileReport(sha256 string) (gin.H, error) {
	// Create client
	client := &http.Client{}

	reqUrl := fmt.Sprintf("https://api.threatbook.cn/v3/file/report?apikey=%s&sandbox_type=%s&sha256=%s&query_fields=summary&query_fields=network&query_fields=pstree&query_fields=signature", apiKey, env, sha256)

	log.Println(reqUrl)

	// Create request
	req, err := http.NewRequest("GET", reqUrl, nil)

	parseFormErr := req.ParseForm()
	if parseFormErr != nil {
		fmt.Println(fmt.Sprintf("request pase fail: %v", parseFormErr))
		return nil, parseFormErr
	}

	fmt.Println("request : ", req)

	// Fetch Request
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println(fmt.Sprintf("request fetch fail: %v", err))
		return nil, err
	}

	// Read Response Body
	respBody, _ := ioutil.ReadAll(resp.Body)

	// Display Results
	fmt.Println("response Status : ", resp.Status)
	fmt.Println("response Headers : ", resp.Header)
	//fmt.Println("response Body : ", string(respBody))

	rsp := consts.UploadResponse{}
	if err := json.Unmarshal(respBody, &rsp); err != nil {
		return nil, err
	}

	// if body not get answer, return nil
	if rsp.ResponseCode == 4 {
		return nil, fmt.Errorf("正在分析中，请稍等再试")
	} else if rsp.ResponseCode != 0 {
		return nil, fmt.Errorf(rsp.VerboseMsg)
	}

	// 存到malware中
	fmt.Println("[fileReport] going to save in malware: ")
	malwareDao := c.createMalwareByRsp(rsp)
	fmt.Println(fmt.Sprintf("[fileReport] dao malware:  %v", malwareDao))
	if err := c.MalwareDaoInstance.CreateDirectly(malwareDao); err != nil {
		fmt.Println(fmt.Sprintf("[fileReport] write malware err: %v", err))
	}
	return gin.H{"data": rsp.Data}, nil
}

func (c MalwareService) createMalwareByRsp(rsp consts.UploadResponse) model.Malware {
	// 通过visual total获取数据会不会更准？
	_, fileName := filepath.Split(rsp.Data.Summary.FileName)
	if rsp.Data.Summary.ThreatLevel == "clean" {
		return model.Malware{
			Name:       fileName,
			Path:       rsp.Data.Summary.FileType,
			UserId:     123,
			CategoryId: 0,
			Size:       rsp.Data.Summary.FileSize,
			Sha256:     rsp.Data.Summary.SampleSha256,
		}
	}
	malware := model.Malware{
		Name:       fileName,
		Path:       rsp.Data.Summary.FileType,
		UserId:     123,
		CategoryId: 1,
		Category: &model.Category{
			ID:         10001,
			LabelName:  rsp.Data.Summary.MalwareType,
			FamilyName: rsp.Data.Summary.MalwareFamily,
		},
		Size:   rsp.Data.Summary.FileSize,
		Sha256: rsp.Data.Summary.SampleSha256,
		Type:   rsp.Data.Summary.MalwareType,
		Family: rsp.Data.Summary.MalwareFamily,
	}
	return malware
}
