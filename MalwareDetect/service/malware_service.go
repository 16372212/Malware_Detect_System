package service

import (
	"MalwareDetect/dao"
	"MalwareDetect/model"
	"MalwareDetect/model/vo"
	"MalwareDetect/util/errors"
	"fmt"
	"log"
	"path/filepath"
	"strconv"

	"github.com/gin-gonic/gin"
)

type MalwareService struct {
	MalwareDaoInstance dao.MalwareDao
}

func NewMalwareService() *MalwareService {
	instance := dao.NewMalwareDao()
	instance.DB.AutoMigrate(model.Malware{})
	return &MalwareService{MalwareDaoInstance: instance}
}

func (m MalwareService) Create(ctx *gin.Context) (*model.Malware, error) {
	var req vo.CreateMalwareRequest
	if err := ctx.ShouldBind(&req); err != nil {
		log.Print(err.Error())
		return nil, errors.New("数据验证错误")
	}

	// find user
	user, _ := ctx.Get("user")

	malware, err := m.MalwareDaoInstance.Create(user.(model.User).ID, req)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryService] create fail, err:%s", err.Error()))
		panic(err)
	}
	return malware, nil
}

func (m MalwareService) Update(ctx *gin.Context) (*model.Malware, error) {
	var req vo.CreateMalwareRequest
	// 数据验证
	if err := ctx.ShouldBind(&req); err != nil {
		log.Print(err.Error())
		return nil, errors.New("数据验证错误")
	}

	postId := ctx.Params.ByName("id")

	var updateMalware model.Malware
	if m.MalwareDaoInstance.DB.Where("id = ?", postId).First(&updateMalware).RecordNotFound() {
		return nil, errors.New("malware不存在")
	}

	// 判断当前用户是否为malware的作者
	// 获取登录用户
	user, _ := ctx.Get("user")
	userId := user.(model.User).ID
	if userId != updateMalware.UserId {
		log.Println(fmt.Sprintf("you are %d, this malware belongs to %d", userId, updateMalware.UserId))
		return nil, errors.New("该malware的上传者不属于您，无法修改")
	}

	// 更新文章
	malware, err := m.MalwareDaoInstance.Update(updateMalware, req)
	if err != nil {
		log.Println(fmt.Sprintf("[MalwareHandler] update fail, err:%s", err.Error()))
		panic(err)
	}
	return malware, nil
}

func (m MalwareService) Show(ctx *gin.Context) (*model.Malware, error) {
	malwareId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	malware, err := m.MalwareDaoInstance.SelectById(malwareId)
	if err != nil {
		return nil, errors.New("malware不存在")
	}

	return malware, nil
}

func (m MalwareService) Delete(ctx *gin.Context) (*model.Malware, error) {
	// get id in path
	postId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	// get user
	malware, err := m.MalwareDaoInstance.SelectById(postId)
	if err != nil {
		return nil, errors.New("malware不存在")
	}

	user, _ := ctx.Get("user")
	userId := user.(model.User).ID
	if userId != malware.UserId {
		log.Println(fmt.Sprintf("you are %d, this malware belongs to %d", userId, malware.UserId))
		return nil, errors.New("malware不属于您，请勿非法操作")
	}

	if err = m.MalwareDaoInstance.DeleteById(postId); err != nil {
		return nil, errors.New("internal error")
	}
	return malware, nil
}

func (c MalwareService) PageList(ctx *gin.Context) (gin.H, error) {
	// 获取分页参数
	pageNum, _ := strconv.Atoi(ctx.DefaultQuery("pageNum", "1"))
	pageSize, _ := strconv.Atoi(ctx.DefaultQuery("pageSize", "20"))

	// 分页, 按照创建时间排序
	malwares, err := c.MalwareDaoInstance.Order("created_at desc", pageNum, pageSize)
	if err != nil {
		return nil, err
	}
	// 记录的总条数
	total := c.MalwareDaoInstance.Count()

	// 返回数据
	return gin.H{"data": malwares, "total": total}, nil
}

func (c MalwareService) UploadFile(ctx *gin.Context) (string, error) {
	var req vo.CreateMalwareRequest
	if err := ctx.ShouldBind(&req); err != nil {
		log.Print(err.Error())
		return "", errors.New("数据验证错误")
	}

	engine := gin.Default()
	engine.MaxMultipartMemory = 8 << 20
	file, err := ctx.FormFile("file")
	if err != nil {
		return "", errors.NewWithCode(500, "上传文件出错,")
	}

	basePath := "./upload/"
	filename := basePath + filepath.Base(file.Filename)

	if err := ctx.SaveUploadedFile(file, filename); err != nil {
		return "", errors.NewWithCode(500, fmt.Sprintf("写入文件出错, err:%s", err))
	}

	return filename, nil
}
