package service

import (
	"MalwareDetect/dao"
	"MalwareDetect/model"
	"MalwareDetect/model/vo"
	"MalwareDetect/util/errors"
	"MalwareDetect/util/response"
	"fmt"
	"log"
	"strconv"

	"github.com/gin-gonic/gin"
)

// CategoryService 相同的包下不能支持相同的名称，为了和user系列的create不重名，这里定义了一个结构体的名称
type CategoryService struct {
	CategoryDaoInstance dao.CategoryDao
}

func NewCategoryService() *CategoryService {
	instance := dao.NewCategoryDao()
	instance.DB.AutoMigrate(model.Category{})
	return &CategoryService{CategoryDaoInstance: instance}
}

func (c CategoryService) Create(ctx *gin.Context) (interface{}, error) {
	var req vo.CreateCategoryRequest
	if err := ctx.ShouldBind(&req); err != nil {
		return nil, errors.New("数据验证错误，分类名称必须填")
	}
	category, err := c.CategoryDaoInstance.Create(req.LabelName, req.FamilyName)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryService] create fail, err:%s", err.Error()))
		panic(err)
	}
	return category, nil
}

func (c CategoryService) Update(ctx *gin.Context) (interface{}, error) {
	var req vo.CreateCategoryRequest
	if err := ctx.ShouldBind(&req); err != nil {
		return nil, errors.New("数据验证错误，分类名称必须填")
	}

	// get param in query of url path
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	updateCategory, err := c.CategoryDaoInstance.SelectById(categoryId)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryService] update fail, not exist"))
		return nil, errors.New("分类不存在")
	}

	category, err := c.CategoryDaoInstance.Update(*updateCategory, req.LabelName, req.FamilyName)
	if err != nil {
		log.Println(fmt.Sprintf("[CategoryService] update fail, err:%s", err.Error()))
		panic(err)
	}

	return category, nil
}

func (c CategoryService) Show(ctx *gin.Context) (interface{}, error) {
	// 获取path中的参数,将字符串强转成int类型
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))

	category, err := c.CategoryDaoInstance.SelectById(categoryId)
	if err != nil {
		return nil, errors.New("分类不存在")
	}

	return category, nil
}

// Delete 一般恶意代码分类不应该被用户所删除，用户只能通过传输malware的方式增加一个新的种类
func (c CategoryService) Delete(ctx *gin.Context) (interface{}, error) {
	// get param in query of url path
	categoryId, _ := strconv.Atoi(ctx.Params.ByName("id"))
	if err := c.CategoryDaoInstance.DeleteById(categoryId); err != nil {
		panic(err)
	}
	return nil, errors.New("删除成功")
}

func (c CategoryService) PageList(ctx *gin.Context) (gin.H, error) {
	// 获取分页参数
	pageNum, _ := strconv.Atoi(ctx.DefaultQuery("pageNum", "1"))
	pageSize, _ := strconv.Atoi(ctx.DefaultQuery("pageSize", "20"))

	categories, err := c.CategoryDaoInstance.Order("created_at desc", pageNum, pageSize)
	if err != nil {
		response.Fail(ctx, err.Error(), nil)
		return nil, err
	}
	// 记录的总条数
	total := c.CategoryDaoInstance.Count()

	// 返回数据
	return gin.H{"data": categories, "total": total}, nil
}
