package errors

import (
	"MalwareDetect/consts"
	"fmt"
)

var empty = New("empty")

type StandardErr struct {
	// HTTP状态码，用于返回信息
	HttpStatus int32 `json:"http_status"`
	// 业务异常代码，往往和具体异常绑定
	Code int32 `json:"code"`
	// 具体的异常信息，用于内部流转，不暴露给用户
	Message string `json:"message"`
	// 简略的异常信息，用于展示给用户
	// 如果Summary不存在则返回给用户Message
	Summary string `json:"summary"`
}

func (a *StandardErr) Error() string {
	if a.Message == "" {
		return a.Summary
	}
	return a.Message
}

func Empty() error {
	return empty
}

func New(msg string, baseErr ...error) error {
	return NewWithCode(consts.StatusInternalServerError, msg, baseErr...)
}

// NewWithCode 创建带有code和msg的err
func NewWithCode(code int32, msg string, baseErr ...error) error {
	if len(baseErr) == 0 {
		return &StandardErr{
			HttpStatus: consts.DefaultHttpErrStatus,
			Code:       code,
			Message:    msg,
		}
	}
	aBaseErr := baseErr[0]
	newMsg := fmt.Sprintf(aBaseErr.Error(), msg, ";")
	if baseApiErr, ok := aBaseErr.(*StandardErr); ok {
		newErr := &StandardErr{
			HttpStatus: baseApiErr.HttpStatus,
			Code:       code,
			Message:    newMsg,
			Summary:    baseApiErr.Summary,
		}
		if baseApiErr.Code != consts.DefaultHttpErrStatus {
			newErr.Code = baseApiErr.Code
		}
		return newErr
	}
	return &StandardErr{
		HttpStatus: consts.DefaultHttpErrStatus,
		Code:       code,
		Message:    newMsg,
	}
}

func NewWithHttpStatus(httpStatus int32, summary string, baseErr ...error) error {
	if len(baseErr) == 0 {
		return &StandardErr{
			HttpStatus: httpStatus,
			Code:       consts.DefaultHttpErrStatus,
			Message:    summary,
			Summary:    summary,
		}
	}
	aBaseErr := baseErr[0]
	if baseApiErr, ok := aBaseErr.(*StandardErr); ok {
		newErr := &StandardErr{
			HttpStatus: httpStatus,
			Code:       baseApiErr.Code,
			Message:    baseApiErr.Message,
			Summary:    summary,
		}
		if baseApiErr.Summary != "" {
			newErr.Summary = baseApiErr.Summary
		}
	}
	return &StandardErr{
		HttpStatus: httpStatus,
		Code:       consts.DefaultHttpErrStatus,
		Message:    aBaseErr.Error(),
		Summary:    summary,
	}
}
