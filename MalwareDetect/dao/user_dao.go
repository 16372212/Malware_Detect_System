package dao

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"github.com/jinzhu/gorm"
)

type UserDao struct {
	DB *gorm.DB
}

func NewUserDao() UserDao {
	return UserDao{DB: common.GetDB()}

}

func (c UserDao) Create(name string, telephone string, password string) (*model.User, error) {
	user := model.User{
		Name:      name,
		Telephone: telephone,
		Password:  password,
	}

	if err := c.DB.Create(&user).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

func (c UserDao) Update(user model.User, name string, telephone string, password string) (*model.User, error) {
	updateCat := map[string]interface{}{"name": name, "telephone": telephone, "password": password}
	if err := c.DB.Model(&user).Update(updateCat).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

func (c UserDao) SelectById(id int) (*model.User, error) {
	var user model.User
	if err := c.DB.First(&user, id).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

func (c UserDao) DeleteById(id int) error {
	if err := c.DB.Delete(model.User{}, id).Error; err != nil {
		return err
	}

	return nil
}

func (c UserDao) Order(value string, pageNum int, pageSize int) (*[]model.User, error) {
	var user []model.User
	if err := c.DB.Order(value).Offset((pageNum - 1) * pageSize).Limit(pageSize).Find(&user).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

func (c UserDao) Count() int {
	var total int
	c.DB.Model(model.User{}).Count(&total)
	return total
}
