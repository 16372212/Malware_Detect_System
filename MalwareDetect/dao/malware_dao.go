package dao

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"MalwareDetect/model/vo"
	"github.com/jinzhu/gorm"
)

type MalwareDao struct {
	DB *gorm.DB
}

func NewMalwareDao() MalwareDao {
	return MalwareDao{DB: common.GetDB()}
}

func (c MalwareDao) Create(userID uint, req vo.CreateMalwareRequest) (*model.Malware, error) {
	malware := model.Malware{
		Name:       req.Name,
		Path:       req.Path,
		UserId:     userID,
		CategoryId: req.CategoryId,
		Content:    req.Content,
	}

	if err := c.DB.Create(&malware).Error; err != nil {
		return nil, err
	}

	return &malware, nil
}

func (c MalwareDao) Update(malware model.Malware, req vo.CreateMalwareRequest) (*model.Malware, error) {
	if err := c.DB.Model(&malware).Update(req).Error; err != nil {
		return nil, err
	}

	return &malware, nil
}

func (c MalwareDao) SelectById(id int) (*model.Malware, error) {
	var malware model.Malware
	if err := c.DB.First(&malware, id).Error; err != nil {
		return nil, err
	}

	return &malware, nil
}

func (c MalwareDao) DeleteById(id int) error {
	if err := c.DB.Delete(model.Malware{}, id).Error; err != nil {
		return err
	}

	return nil
}

func (c MalwareDao) Order(value string, pageNum int, pageSize int) (*[]model.Malware, error) {
	var malwares []model.Malware
	if err := c.DB.Order(value).Offset((pageNum - 1) * pageSize).Limit(pageSize).Find(&malwares).Error; err != nil {
		return nil, err
	}
	return &malwares, nil
}

func (c MalwareDao) Count() int {
	var total int
	c.DB.Model(model.Malware{}).Count(&total)
	return total
}
