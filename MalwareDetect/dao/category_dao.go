package dao

import (
	"MalwareDetect/common"
	"MalwareDetect/model"
	"github.com/jinzhu/gorm"
)

type CategoryDao struct {
	DB *gorm.DB
}

func NewCategoryDao() CategoryDao {
	return CategoryDao{DB: common.GetDB()}
}

func (c CategoryDao) Create(labelName string, familyName string) (*model.Category, error) {
	category := model.Category{
		FamilyName: familyName,
		LabelName:  labelName,
	}

	if err := c.DB.Create(&category).Error; err != nil {
		return nil, err
	}

	return &category, nil
}

func (c CategoryDao) Update(category model.Category, labelName string, familyName string) (*model.Category, error) {
	updateCat := map[string]interface{}{"label_name": labelName, "family_name": familyName}
	if err := c.DB.Model(&category).Update(updateCat).Error; err != nil {
		return nil, err
	}

	return &category, nil
}

func (c CategoryDao) SelectById(id int) (*model.Category, error) {
	var category model.Category
	if err := c.DB.First(&category, id).Error; err != nil {
		return nil, err
	}

	return &category, nil
}

func (c CategoryDao) DeleteById(id int) error {
	if err := c.DB.Delete(model.Category{}, id).Error; err != nil {
		return err
	}

	return nil
}

func (c CategoryDao) Order(value string, pageNum int, pageSize int) (*[]model.Category, error) {
	var category []model.Category
	if err := c.DB.Order(value).Offset((pageNum - 1) * pageSize).Limit(pageSize).Find(&category).Error; err != nil {
		return nil, err
	}
	return &category, nil
}

func (c CategoryDao) Count() int {
	var total int
	c.DB.Model(model.Category{}).Count(&total)
	return total
}
